// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_study/network/json_parsing_entity.dart';
import 'package:flutter_study/generated/json/json_parsing_entity_helper.dart';
import 'package:flutter_study/network/article_list_entity.dart';
import 'package:flutter_study/generated/json/article_list_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case JsonParsingEntity:
				return jsonParsingEntityFromJson(data as JsonParsingEntity, json) as T;
			case ArticleListEntity:
				return articleListEntityFromJson(data as ArticleListEntity, json) as T;
			case ArticleListData:
				return articleListDataFromJson(data as ArticleListData, json) as T;
			case ArticleListDataDatas:
				return articleListDataDatasFromJson(data as ArticleListDataDatas, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case JsonParsingEntity:
				return jsonParsingEntityToJson(data as JsonParsingEntity);
			case ArticleListEntity:
				return articleListEntityToJson(data as ArticleListEntity);
			case ArticleListData:
				return articleListDataToJson(data as ArticleListData);
			case ArticleListDataDatas:
				return articleListDataDatasToJson(data as ArticleListDataDatas);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (JsonParsingEntity).toString()){
			return JsonParsingEntity().fromJson(json);
		}	else if(type == (ArticleListEntity).toString()){
			return ArticleListEntity().fromJson(json);
		}	else if(type == (ArticleListData).toString()){
			return ArticleListData().fromJson(json);
		}	else if(type == (ArticleListDataDatas).toString()){
			return ArticleListDataDatas().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<JsonParsingEntity>[] is M){
			return data.map<JsonParsingEntity>((e) => JsonParsingEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleListEntity>[] is M){
			return data.map<ArticleListEntity>((e) => ArticleListEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleListData>[] is M){
			return data.map<ArticleListData>((e) => ArticleListData().fromJson(e)).toList() as M;
		}	else if(<ArticleListDataDatas>[] is M){
			return data.map<ArticleListDataDatas>((e) => ArticleListDataDatas().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}